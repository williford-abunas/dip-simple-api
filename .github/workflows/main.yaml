name: Deploy
on: 
  push: 
    branches: [ "main" ]
  
jobs:

  build-and-push-to-ecr:
  
    name: Build Docker Image
    runs-on: ubuntu-latest  
    steps:  
        - name: Checkout
          uses: actions/checkout@v2    
          
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}


        - name: Login to AWS ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
          

        - name: Build and Push Image to ECR
          env:
            ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
            IMAGE_TAG: latest
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
  deploy:

    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    steps:
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}

        - name: Login to AWS ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Deploy to EC2
          env:
            INSTANCE_ID_1: ${{ secrets.INSTANCE_ID_1 }}
            INSTANCE_ID_2: ${{ secrets.INSTANCE_ID_2 }}
          run: |
            INSTANCE_LIST="$INSTANCE_ID_1,$INSTANCE_ID_2"
            echo "INSTANCE_LIST: $INSTANCE_LIST"
    
            IFS=',' read -ra INSTANCES <<< "$INSTANCE_LIST"
    
            echo "Number of instances: ${#INSTANCES[@]}"
            echo "Instance 1: ${INSTANCES[0]}"
            echo "Instance 2: ${INSTANCES[1]}"

            command_id=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=$INSTANCE_LIST" \
            --comment "Pull Docker image and run it on EC2 instances" \
            --parameters '{"commands":["aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS  --password-stdin ${{ steps.login-aws-ecr.outputs.registry }}","docker pull ${{ steps.login-aws-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPO }}:latest","docker stop ${{ vars.CONTAINER_NAME }} || true","docker rm ${{ vars.CONTAINER_NAME }} || true","docker run -d --name ${{ vars.CONTAINER_NAME }} -p 3000:3000 ${{ steps.login-aws-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPO }}:latest", "docker logs ${{ vars.CONTAINER_NAME }}"]}' \
            --query "Command.CommandId" --output text)

             for instance in "${INSTANCES[@]}"; do
             echo "⏳ Waiting for command on $instance ..."
              aws ssm wait command-executed \
              --command-id "$command_id" \
              --instance-id "$instance" \
              --region ${{ secrets.AWS_REGION }}
              done

             overall_status="Success"

              for instance in "${INSTANCES[@]}"; do
              echo "🔍 Fetching results for $instance ..."
              invocation=$(aws ssm list-command-invocations \
              --command-id "$command_id" \
              --instance-id "$instance" \
              --details \
              --region ${{ secrets.AWS_REGION }})

              status=$(echo "$invocation" | jq -r '.CommandInvocations[0].Status')

              echo "➡️ Instance: $instance"
              echo "   Overall Status : $status"
              echo "   ---------------- Commands ----------------"

              echo "$invocation" | jq -c '.CommandInvocations[0].CommandPlugins[]' | while read -r plugin; do
              cmd_status=$(echo "$plugin" | jq -r '.Status')
              output=$(echo "$plugin" | jq -r '.Output')
              name=$(echo "$plugin" | jq -r '.Name')

              echo "   🔹 Command: $name"
              echo "      Status : $cmd_status"
              echo "      Output :"
              echo "$output" | sed 's/^/         /'
              echo "   -----------------------------------------"
             done

             if [ "$status" != "Success" ]; then
             overall_status="Failed"
            fi
            done

            if [ "$overall_status" != "Success" ]; then
            echo "❌ Deployment failed on one or more instances"
            exit 1
            fi

            echo "✅ Deployment succeeded on all instances!"
