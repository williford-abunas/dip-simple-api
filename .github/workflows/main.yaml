name: Deploy
on: 
  push: 
    branches: [ "main" ]
  
jobs:
  build-and-push-to-ecr:
  
    name: Build Docker Image
    runs-on: ubuntu-latest  
    steps:  
        - name: Checkout
          uses: actions/checkout@v2    
          
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}


        - name: Login to AWS ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2
          

        - name: Build and Push Image to ECR
          env:
            ECR_REGISTRY: ${{ steps.login-aws-ecr.outputs.registry }}
            ECR_REPOSITORY: ${{secrets.AWS_ECR_REPO}}
            IMAGE_TAG: latest
          run: |
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    steps:
        - name: Configure AWS Credentials
          uses: aws-actions/configure-aws-credentials@v4
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{secrets.AWS_REGION}}

        - name: Login to AWS ECR
          id: login-aws-ecr
          uses: aws-actions/amazon-ecr-login@v2

        - name: Deploy to EC2
          run: |
            command_id=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets "Key=instanceIds,Values=i-0ac654832a8d258d6,i-0061ae24765319f20" \
            --comment "Pull Docker image and run it on EC2 instance" \
            --parameters '{"commands":["aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS      --password-stdin vgsdvffdbdb","docker pull ${{ steps.login-aws-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPO }}:latest","docker stop my-container || true","docker rm my-container || true","docker run -d --name my-container -p 3000:3000 ${{ steps.login-aws-ecr.outputs.registry }}/${{ secrets.AWS_ECR_REPO }}:latest"]}' --query "Command.CommandId" --output text)

            echo "Command ID: $command_id"

            aws ssm wait command-executed \
            --command-id "$command_id" \
            --instance-id "i-0ac654832a8d258d6" \
            --region ${{ secrets.AWS_REGION }}

            status=$(aws ssm list-commands --command-id "$command_id" --query "Commands[0].Status" --output text) || true

            echo "$status"

             if [ "$status" != "Success" ]; then
            echo "❌ Deployment failed with status: $status"
            exit 1
            fi

            echo "✅ Deployment succeeded!"